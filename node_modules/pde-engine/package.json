{
  "name": "pde-engine",
  "version": "0.1.1",
  "description": "Basic heat and wave equation solver for node and the browser",
  "main": "pdeEngine.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bpostlethwaite/pdeEngine.git"
  },
  "keywords": [
    "pde",
    "physics",
    "equation",
    "wave",
    "diffusion",
    "heat",
    "engine",
    "math"
  ],
  "author": {
    "name": "Ben Postlethwaite"
  },
  "license": "MIT",
  "readme": "# pde-engine\n\n\nA simple solver of the heat/diffusion equation and wave equation meant for driving visualizations not for performing exacting scientific analysis. The forward Euler step is employed for simplicity and speed, as well as further simplifying the discrete equations with the convolution operator.\n\nIt solves the pde on an nxm square grid with n and m being defined by the `setResolution` method.\n\n## How to use\n\n```javascript\nio = require('socket.io').listen(6543)\nengine = require('pdeEngine')\nfield = engine( {\n    dt: 0.1\n  , gamma: 0.02\n  , eqn: \"wave\"\n  })\nfield.setResolution(80, 100)\n\nio.sockets.on('connection', function (socket) {\n\n  socket.on('addSource', function(data) {\n    field.addSource(data.row, data.col, mag)\n  })\n\n})\n\nsetInterval( function () {\n\n  var coeffs = field.update( {\n      dt: 0.1\n    , eqn: \"diffusion\"\n    , alpha: 0.5\n    })\n\n  // Render coeffs //\n\n} , 50 )\n```\n\nOf course you can employ any means of adding sources.\nThe `addSource` method specifies the location of the source at that particular timestep with magnitude `mag`. Right now it emplaces a hard-coded Gaussian source centred at `(row, col)`, with boundary cases already implemented.\n\n## Configuration\nThe following are possible configuration options. If configs are omitted defaults will be used. The defaults are given after the `||`:\n```javascript\n{\n   dt = spec.dt || 0.1\n , dx = spec.dx || 1\n , gamma = spec.gamma || 0.02   // wave decay factor\n , vel = spec.vel || 2          // wave velocity\n , alpha = spec.alpha || 1      // diffusion paramter\n , eqn = spec.eqn || 'wave'\n}\n```\n\n## Versioning and updates\n\nThis is an early but fully working physics engine. Future releases may optimize algorithms or add new methods/configs, but this basic API should remain stable.\n\nTests will be coming I have them already for my own purposes.  Just need to refactor and include.\n",
  "_id": "pde-engine@0.1.1",
  "_from": "pde-engine"
}
