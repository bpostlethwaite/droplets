{"ts":1340910348007,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*jshint asi: true*/\n/*jshint laxcomma: true*/\n\"use strict\";\nvar server = require(\"node-static\")\n  , app = require(\"http\").createServer(handler)\n  , io = require(\"socket.io\").listen(app)\n  , marked = require(\"marked\")\n  , fs = require('fs')\n\n// Set logging level\nio.set('log level', 1)\n// Listen on port\nvar port = process.env.PORT\n//var port = 8081\napp.listen(port)\nconsole.log(\"Static server listening on \" + port)\n//\n// BORING SERVER\n//\nvar clientFiles = new server.Server(\"./public\")\nfunction handler(request, response) {\n  request.addListener('end', function() {\n    //\n    // Serve files!\n    //\n    clientFiles.serve(request, response, function(err, res) {\n      if (err) { // An error as occured\n        console.log(\"> Error serving \" + request.url + \" - \" + err.message)\n        response.writeHead(err.status, err.headers);\n        response.end()\n      }\n      else { // The file was served successfully\n        console.log(\"> \" + request.url + \" - \" + res.message)\n      }\n    })\n  })\n}\n//\n// Get Content, use call back to start up the socketIO\n// Loop through files asyncronously until all files\n// read, then call callback with accumulated data and\n// run socketIO\nfunction readAndConnect(items, cb) {\n  var i\n    , count = 0\n    , content = []\n  for (i = 0; i < items.length; ++i) {\n    parseMarkdown(items[i])\n  }\n\n  function parseMarkdown(file) {\n    fs.readFile(\"docs/\" + file, 'utf8', function (err, data) {\n      var html\n      if (err) {\n          console.log(\"error reading \" + file)\n      }\n      try {\n        html =  marked(data)\n      } catch(e) {\n        html = ''\n        console.log('Error converting ' + file + ' to html')\n      }\n      content.push({\n         \"head\": file.toLowerCase().slice(0,-3) // lop off the .md extension\n        ,\"body\": html\n        })\n      count += 1\n      if (count === files.length) {\n          cb(content)\n      }\n    }) //end readFrile\n  } // end parseMarkdown\n} // end ReadContent\n\nvar files = [\"README.md\"]\nreadAndConnect(files, function (data) {\n  //\n  // SOCKETS!\n  //\n  io.sockets.on('connection', function(socket) {\n    //\n    // Connect content\n    //\n    var i\n    for (i = 0; i < data.length; i++) {\n      socket.emit( data[i].head, data[i].body )\n    }\n    //\n    // Broadcast droplets\n    //\n    socket.on('clientDroplet', function(data) {\n      socket.broadcast.emit('newDroplet', data)\n    })\n  })\n}) // end readContent call\n"]],"start1":0,"start2":0,"length1":0,"length2":2398}]],"length":2398}
